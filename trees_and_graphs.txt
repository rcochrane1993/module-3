1.A binary search tree is a tree in which the left node is always a lesser value, while the right node is
always a greater value.This makes it unique from other trees where the left or right nodes don't have contrictions

2. a heuristic is a "guess" made my a computer through an algorithm in order to increase efficiency
and avoid finding all possible answers and choosing the right one.

3. another problem requiring heuristics could be a hacker trying to find the pin number of a credit card number he 
acquired.

4.a depth-first search searches all the way down a tree for as long as possible for each branch
while a breath-first search does the opposit and checks all the neighboring nodes before moving to the 
next level down in the tree.

5. An undirected,a-cyclic, unweighted graph is a graph that does not specify direction of travel, cannot form
a closed loop, and there is no assigned "travel-cost" for going between nodes.

6.a binary search tree could be an undirected,a-cyclic,unweighted graph




PROGRAMMING QUESTIONS
1&2
class Tree{
  constructor(){
    this.root = null;
    this.count= 0;
  }
    
    addNode(node,newNode){
      if (newNode.value > node.value){
        if(node.right !== null){
          this.addNode(node.right,newNode)
        } else {
          node.right = newNode
        }
      } else if (newNode.value < node.value){
        if(node.left){
          this.addNode(node.left,newNode)
        } else {
          node.left = newNode
        }
      }
    }

    createNode(value){
      let node = {value: value, right:null,left:null}
      if (this.root ===null){
        this.root = node
      } else {
        this.addNode(this.root,node)
      }
  }

    
    search(item){
      let node = this.root
      while (node){
      if (node.value === item){
        return true
      } else if(item < node.value){
        node = node.left
      }else if (item > node.value){
        node = node.right
      }  
    }
    return false
  }

  findLCA(v1, v2, node){
    if(!node){
      node = this.root;
    }
    if(v1<node.value && v2<node.value){
      return this.findLCA(v1,v2,node.left)
    }
    if(v1>node.value && v2 >node.value){
      return this.findLCA(v1,v2,node.right)
    }
    return node
    
  }
   
   
  distanceToNode(value, node){
    if(!node){
      node = this.root;
    }
    
    if(value < node.value && node.left){
      this.count++;
      return this.distanceToNode(value, node.left)
    }
    if (value > node.value && node.right){
      this.count++;
      return this.distanceToNode(value, node.right)
    }  
    return this.count 
  }

  distance(n1,n2){
    let lca = this.findLCA(n1,n2,this.root)
    //console.log(lca);
    let d1 = this.distanceToNode(n1,lca)
    this.count = 0;
    let d2 = this.distanceToNode(n2, lca)

    return d1 + d2;
  }


}

var newTree = new Tree;
newTree.createNode(8)
newTree.createNode(10)
newTree.createNode(3)
newTree.createNode(6)
newTree.createNode(1)
newTree.createNode(4)
newTree.createNode(9)


console.log(newTree.distance(4,1))

console.log(newTree.distanceToRoot(10))