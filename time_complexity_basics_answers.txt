1. Time complexity is a function that estimates the amount of time is takes to execute a program.
This is done by calculating how quickly the time to run the program grows relative to the amount of input fed 
into the program.

2. Runtime can sometimes refer the the physical time it takes for a program to execute, but is mostly used interchangibly
with time complexity.

3. Runtime is calculated by adding up adding up how many instructions the algorithm will execute as a function of the size of its 
input, then simplifying to the largest term and dopping the constants.

4. constant growth rate 0(1)
   logarithmic growth rate 0(log n)
   linear growth rate 0(n)
   log-linear growth rate 0(n log n)
   quadratic growth rate 0(n^2)
   cubic growth rate 0(n^3)
   exponential growth rate 0(2^n)

5. constant growth rate- Consider a principal of a school doing the morning announcements, regardless of the number of students
in the school, the announcements are only read out one time.

6.linear growth 0(n)

7. quadratic growth 0(n^2)

8 exponential growth rate 0(2^n)

9. number 6 has the most time efficient alogrithm